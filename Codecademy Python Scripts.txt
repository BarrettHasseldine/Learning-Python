"""
Boolean operators aren't just evaluated from left to right. Just like with arithmetic operators, there's an order of operations for boolean operators:
o	not is evaluated first;
o	and is evaluated next;
o	or is evaluated last.
Modules contain thinks like functions and variables. “Import math” (to add maths functions like SQRT) then math.sqrt. dir(math) will show a directory of all functions
o	Can just import that one by “from math import sqrt”. Then no need to use math.sqrt, just sqrt
o	To avoid using math.sqrt, can also just go “from math import *”, but this can clutter variables
	
"""


zoo_animals = ["pangolin", "cassowary", "sloth", "human"];
# One animal is missing!

if len(zoo_animals) > 3:
  print "The first animal at the zoo is the " + zoo_animals[0]
  print "The second animal at the zoo is the " + zoo_animals[1]
  print "The third animal at the zoo is the " + zoo_animals[2]
  print "The fourth animal at the zoo is the " + zoo_animals[3]


numbers = [5, 6, 7, 8]

print "Adding the numbers at indices 0 and 2..."
print numbers[0] + numbers[2]
print "Adding the numbers at indices 1 and 3..."
print numbers[1] + numbers[3]


zoo_animals = ["pangolin", "cassowary", "sloth", "tiger"]
# Last night our zoo's sloth brutally attacked 
# the poor tiger and ate it whole.

# The ferocious sloth has been replaced by a friendly hyena.
zoo_animals[2] = "hyena"

# What shall fill the void left by our dear departed tiger?
# Your code here!
zoo_animals[3] = "another tiger"


suitcase = [] 
suitcase.append("sunglasses")

# Your code here!

suitcase.append("hat")
suitcase.append("coat")
suitcase.append("access pass")


list_length = len (suitcase) # Set this to the length of suitcase

print "There are %d items in the suitcase." % (list_length)
print suitcase


suitcase = ["sunglasses", "hat", "passport", "laptop", "suit", "shoes"]

# The first and second items (index zero and one)
first = suitcase[0:2]

# Third and fourth items (index two and three)
middle = suitcase[2:4]

# The last two items (index four and five)
last =  suitcase[4:]


animals = "catdogfrog"

# The first three characters of animals
cat = animals[:3]

# The fourth through sixth characters
dog = animals[3:6]

# From the seventh character to the end
frog = animals[6:]


animals = ["aardvark", "badger", "duck", "emu", "fennec fox"]
duck_index = animals.index("duck")

animals.insert(duck_index,"cobra")


print animals # Observe what prints after the insert operation


my_list = [1,9,3,8,5,7]

for number in my_list:
  print 2 * number
  


start_list = [5, 3, 1, 2, 4]
square_list = []

# Your code here!
for digit in start_list:
  square_list.append(digit**2)

square_list.sort()

print square_list



"""A dictionary is similar to a list, but you access values by looking up a key instead of an index. A key can be any string or number. Dictionaries are enclosed in curly braces, like so:

d = {'key1' : 1, 'key2' : 2, 'key3' : 3}
This is a dictionary called d with three key-value pairs. The key 'key1' points to the value 1, 'key2' to 2, and so on."""

# Assigning a dictionary with three key-value pairs to residents:
residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}

print residents['Puffin'] # Prints Puffin's room number

# Your code here!
print residents['Sloth']
print residents['Burmese Python']


menu = {} # Empty dictionary
menu['Chicken Alfredo'] = 14.50 # Adding new key-value pair
print menu['Chicken Alfredo']

# Your code here: Add some dish-price pairs to menu!
menu['Fish and Chips'] = 8.99
menu['Butter Chicken'] = 12.95
menu['Char Kwai Tao'] = 0.00



print "There are " + str(len(menu)) + " items on the menu."
print menu


# key - animal_name : value - location 
zoo_animals = { 'Unicorn' : 'Cotton Candy House',
'Sloth' : 'Rainforest Exhibit',
'Bengal Tiger' : 'Jungle House',
'Atlantic Puffin' : 'Arctic Exhibit',
'Rockhopper Penguin' : 'Arctic Exhibit'}
# A dictionary (or list) declaration may break across multiple lines

# Removing the 'Unicorn' entry. (Unicorns are incredibly expensive.)
del zoo_animals['Unicorn']

# Your code here!

del zoo_animals['Sloth']
del zoo_animals['Bengal Tiger']
zoo_animals['Rockhopper Penguin'] = 'Somewhere else'


print zoo_animals


backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']

backpack.remove("dagger")


inventory = {
  'gold' : 500,
  'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key
  'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']
}

# Adding a key 'burlap bag' and assigning a list to it
inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']

# Sorting the list found under the key 'pouch'
inventory['pouch'].sort() 

# Your code here
inventory['pocket'] = ['seashell', 'strange berry', 'lint']
inventory['backpack'].sort()
inventory['backpack'].remove('dagger')
inventory['gold'] += 50


----------------------------------------------------------


names = ["Adam","Alex","Mariah","Martine","Columbus"]

for x in names:
  print x


webster = {
  "Aardvark" : "A star of a popular children's cartoon show.",
  "Baa" : "The sound a goat makes.",
  "Carpet": "Goes on the floor.",
  "Dab": "A small amount."
}

# Add your code below!
for x in webster:
  print webster[x]

a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

for x in a:
  if x % 2 == 0:
    print x


# Write your function below!

def fizz_count(x):
  count = 0
  for z in x:
    if z == "fizz":
      count = count + 1
  return count

fizz_count(["fizz","cat","fizz"])


# As we've mentioned, strings are like lists with characters as elements. You can loop through strings the same way you loop through lists! 

for letter in "Codecademy":
  print letter
    
# Empty lines to make the output pretty
print
print

word = "Programming is fun!"

for letter in word:
  # Only print out the letter i
  if letter == "i":
    print letter


prices = {"banana": 4,
"apple": 2,
"orange": 1.5,
"pear": 3}

stock = {"banana": 6,
"apple": 0,
"orange": 32,
"pear": 15}

for item in prices:
  print item
  print "price: " + str(prices[item])
  print "stock: " + str(stock[item])

value = 0
for key in prices:
  value += prices[key] * stock[key]

print value


shopping_list = ["banana", "orange", "apple"]

stock = {
  "banana": 6,
  "apple": 0,
  "orange": 32,
  "pear": 15
}
    
prices = {
  "banana": 4,
  "apple": 2,
  "orange": 1.5,
  "pear": 3
}

# Write your code below!

def compute_bill(food):
  total = 0
  for item in food:
    if stock[item] > 0:
      total += prices[item]
      stock[item] -= 1
  return total


------------------------------------------------------------------


lloyd = {
  "name": "Lloyd",
  "homework": [],
  "quizzes": [],
  "tests": []
}
alice = {
  "name": "Alice",
  "homework": [100.0, 92.0, 98.0, 100.0],
  "quizzes": [82.0, 83.0, 91.0],
  "tests": [89.0, 97.0]
}
tyler = {
  "name": "Tyler",
  "homework": [0.0, 87.0, 75.0, 22.0],
  "quizzes": [0.0, 75.0, 78.0],
  "tests": [100.0, 100.0]
}

students = [lloyd, alice, tyler]

for student in students:
  print student["name"]
  print student["homework"]
  print student["quizzes"]
  print student["tests"]


lloyd = {
  "name": "Lloyd",
  "homework": [90.0, 97.0, 75.0, 92.0],
  "quizzes": [88.0, 40.0, 94.0],
  "tests": [75.0, 90.0]
}
alice = {
  "name": "Alice",
  "homework": [100.0, 92.0, 98.0, 100.0],
  "quizzes": [82.0, 83.0, 91.0],
  "tests": [89.0, 97.0]
}
tyler = {
  "name": "Tyler",
  "homework": [0.0, 87.0, 75.0, 22.0],
  "quizzes": [0.0, 75.0, 78.0],
  "tests": [100.0, 100.0]
}

# When you divide an integer by another integer, the result is always an integer (rounded down, if needed).


def average(input_list):
  total = 0
  for x in input_list:
    total += x
  return float(total) / len(input_list)

# The \ character is a continuation character. The following line is considered a continuation of the current line.

def get_average(student):
  homework = average(student["homework"])
  quizzes = average(student["quizzes"])
  tests = average(student["tests"])
  return 0.1 * homework + 0.3 * quizzes + 0.6 * tests

def get_letter_grade(score):
  if score >= 90:
    	return "A"
  elif score >= 80:
    	return "B"
  elif score >= 70:
    	return "C"
  elif score >= 60:
    	return "D"
  else:
    	return "F"
    
def get_class_average(class_list):
  results = []
  for student in class_list:
    results.append(get_average(student))
  return average(results)

students = [lloyd, alice, tyler]

mark =  get_class_average(students)
print mark
print get_letter_grade(mark)


-----------------

n = [1, 3, 5]
# Do your multiplication here
n[1] = n[1]*5
print n
n.append(4)

n = [1, 3, 5]
# Remove the first item in the list here
# n.pop(index) will remove the item at index from the list and return it to you
n.pop(0) # removes the 0th item from the list and returns it to me
print n

n = [1, 3, 5]
n.remove(1) # removes an item (element) in this list with a value 1
print n

n = [1, 3, 5]
del(n[0]) # this deletes the 0th element, but doesn't return it
print n


number = 5

def my_function(x):
  return x * 3

print my_function(number)


m = 5
n = 13
# Add add_function here!

def add_function(x,y):
  return x + y


print add_function(m, n)

n = "Hello"
# Your function here!

def string_function(s):
  return s + 'world'

print string_function(n)



m = [1, 2, 3]
n = [4, 5, 6]

# Add your code here!
def join_lists(x,y):
  return x + y

print join_lists(m, n)
# You want this to print [1, 2, 3, 4, 5, 6]



n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here
def flatten(lists):
  results = []
  for numbers in lists:
    for item in numbers:
      results.append(item)
  return results

print flatten(n)



""" Next Section - Battle Ship """


board_size = int(raw_input("How wide would you like the board to be? "))

from random import randint

board = []

for x in range(board_size):
  board.append(["O"] * board_size)

#for item in board:
#	print item

#print board

def print_board(board_in):
  for row in board_in:
    # Use print " ".join(x) to turn into a space-separated array
    print " ".join(row)
  
print_board(board)


def random_row(board_in):
  from random import randint
  return randint(0,len(board_in)-1)

def random_col(board_in):
  from random import randint
  return randint(0,len(board_in)-1)

ship_row = random_row(board)
ship_col = random_col(board)

#print "Ship Row is: %d" % (ship_row)
#print "Ship Col is: %d" % (ship_col)

number_of_guesses = int(raw_input("How many attempts would you like? "))

for turn in range(number_of_guesses):
  print "Turn", turn + 1
  # note raw_input is strong, so need to convert to int
  guess_row = int(raw_input("Guess Row: ")) - 1
  guess_col = int(raw_input("Guess Col: ")) - 1

  if guess_row == ship_row and guess_col == ship_col:
    print "Congratulations! You sunk my battleship!"
    board[guess_row][guess_col] = "!"
    print_board(board)
    break
  else:
    if guess_row not in range(len(board)) \
      or guess_col not in range(len(board)):
      print "Oops, that's not even in the ocean."
    elif(board[guess_row][guess_col] == "X"):
      print "You guessed that one already."
    else:
      print "You missed my battleship!"
      board[guess_row][guess_col] = "X"
    if turn == number_of_guesses-1:
      print "Game Over! The battlesip was in row %d, coloumn %d" % (ship_row+1, ship_col+1)
  if turn + 2 <= number_of_guesses:
    print "Turn", turn + 2
    print_board(board)



""" LOOPS Lessons """


count = 0
while count < 10:
  print "Hello, I am a while and count is", count
  count += 1


loop_condition = True
while loop_condition:
  print "I am a loop"
  loop_condition = False


num = 1
while num < 11:
  print num ** 2
  num += 1


choice = raw_input('Enjoying the course? (y/n)')
while choice not in ('y','n'):
  choice = raw_input("Sorry, I didn't catch that. Enter again: ")


count = 0
while True:
  print count
  count += 1
  if count >= 10:
    break


"""
Something completely different about Python is the while/else construction. while/else is similar to if/else, but there is a difference: the else block will execute anytime the loop condition is evaluated to False. This means that it will execute if the loop is never entered or if the loop exits normally. If the loop exits as the result of a break, the else will not be executed.

In this example, the loop will break if a 5 is generated, and the else will not execute. Otherwise, after 3 numbers are generated, the loop condition will become false and the else will execute.
"""

import random

print "Lucky Numbers! 3 numbers will be generated."
print "If one of them is a '5', you lose!"

count = 0
while count < 3:
  num = random.randint(1, 6)
  print num
  if num == 5:
    print "Sorry, you lose!"
    break
  count += 1
else:
  print "You win!"




from random import randint

# Generates a number from 1 through 10 inclusive
random_number = randint(1, 10)

guesses_left = 3
# Start your game!

while guesses_left > 0:
  print "You have %d guesses left" % (guesses_left)
  guess = int(raw_input("Your guess: "))
  if guess == random_number:
    print "You win!"
    break
  else:
    guesses_left -= 1
else:
  print "You lose. The answer was %d" % (random_number)




print "Counting..."
for i in range(20):
  print i
  


hobbies = []
for i in range(3):
  hobby = raw_input("List a hobby: ")
  hobbies.append(hobby)
print hobbies



word = "eggs!"
for letter in word:
  print letter



# The , character after our print statement means that our next print statement keeps printing on the same line.

phrase = "A bird in the hand..."

for char in phrase:
  if char in ("A","a"):
    print "X",
  else:
    	print char,

print



numbers  = [7, 9, 12, 54, 99]
print "This list contains: "
for num in numbers:
  print num
print "This list quared is: "
for num in numbers:
  print num **2



# When doing a for loop over a distionary, you get the key back
d = {'a': 'apple', 'b': 'berry', 'c': 'cherry'}
for key in d:
  print key + " " + d[key]



# enumerate works by supplying a corresponding index to each element in the list that you pass it. Each time you go through the loop, index will be one greater, and item will be the next item in the sequence. It's very similar to using a normal for loop with a list, except this gives us an easy way to count how many items we've seen so far.

choices = ['pizza', 'pasta', 'salad', 'nachos']

print 'Your choices are:'
for index, item in enumerate(choices):
  print index+1, item



# It's also common to need to iterate over two lists at once. This is where the built-in zip function comes in handy. zip will create pairs of elements when passed two lists, and will stop at the end of the shorter list. zip can handle three or more lists as well!

list_a = [3, 9, 17, 15, 19]
list_b = [2, 4, 8, 10, 30, 40, 50, 60, 70, 80, 90]

for a, b in zip(list_a, list_b):
  print max(a,b)
  



# Just like with while, for loops may have an else associated with them. In this case, the else statement is executed after the for, but only if the for ends normallythat is, not with a break. This code will break when it hits 'tomato', so the else block won't be executed.

fruits = ['banana', 'apple', 'orange', 'tomato', 'pear', 'grape']

print 'You have...'
for f in fruits:
  if f == 'tomato':
    print 'A tomato is not a fruit!' # (It actually is.)
    break
  print 'A', f
else:
  print 'A fine selection of fruits!'



my_array = range(5)
for element in my_array:
  print "I like number %d" % (element+1)
else:
  print "That's all folks!"



""" Practice Problems!!! """


def is_even(x):
  if x % 2 == 0:
    	return True
  else:
    	return False


def is_int(x):
  if int(x) == x:
    return True
  else:
    return False




def digit_sum(n):
  summm = 0
  for digit in str(n):
    summm += int(digit)
  return summm
digit_sum(1234)


def factorial(x):
  result = 1
  for number in range(1,x+1):
    result = result * number
  return result





def is_prime(x):
  print "input value is %d" % (x)
  if (x != int(x)) or x < 2:
    print "Debug Situation 1"
    return False
  else:
    n = 2
    while n < x:
      if (float(x) / n) == int(x/n):
        print "Debug Situation 2 for n = %d" % (n)
        return False
        break
      else:
        print "Debug Situation 3"
        n += 1
    else:
      print "Debug Situation 4"
      return True
is_prime(3)



def reverse(text):
  reversed_string = ""
  for index in range(len(text)-1,-1,-1):
    reversed_string += text[index]
  return reversed_string


def anti_vowel(text):
  result = ""
  for character in text:
    if character not in ('A','E','I','O','U','a','e','i','o','u'):
      result += character
  return result



score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 
         "x": 8, "z": 10}

def scrabble_score(word):
  lower_word = word.lower()
  word_score = 0
  for letter in lower_word:
    word_score += score[letter]
  return word_score




def censor(text,word):
  length = len(word)
  censored_text = text
  replacement = "*" * length
  for index in range(len(text)-length+1):
    if text[index:index+length] == word:
      censored_text = censored_text[:index] + replacement + censored_text[index+length:]
  print censored_text
  return censored_text
censor("I'm looking at some things right now","o")



def count(sequence,item):
  counter = 0
  for element in sequence:
    if element == item:
      counter += 1
  return counter




def purify(input_list):
  purified_list = []
  for element in input_list:
    if element % 2 == 0:
      purified_list.append(element)
  return purified_list




def product(input_list):
  workings = 1
  for element in input_list:
    workings = workings * element
  return workings



def remove_duplicates(input_list):
  adjusted_list = sorted(input_list)
  i = 0
  while i < len(adjusted_list)-1:
    if adjusted_list[i] == adjusted_list[i+1]:
      del(adjusted_list[i])
    else:
      i += 1
  return adjusted_list



def median(input_list):
  sorted_list = sorted(input_list)
  length = len(input_list)
  if length % 2 == 1:
    return sorted_list[int(float(length)/2 - 0.5)]
  else:
    return (float(sorted_list[length/2-1]) + sorted_list[length/2]) / 2



"""" Exam Statistics Sessions    """"


grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]
print "Grades:", grades 

def print_grades(grades_input):
  for grade in grades_input:
  	print grade
    
print_grades(grades)

def grades_sum (scores):
  total = 0
  for score in scores:
    total += score
  print total
  return total

grades_sum(grades)

def grades_average(grades_input):
  avg = grades_sum(grades_input)/float(len(grades_input))
  print avg
  return avg

grades_average(grades)

def grades_variance(scores):
  average = grades_average(scores)
  variance = 0
  for score in scores:
    variance += (score-average)**2
  variance = variance / len(scores)
  print variance
  return variance

grades_variance(grades)

def grades_std_deviation(variance):
  return variance ** 0.5

variance = grades_variance(grades)

print grades_std_deviation(variance)




""" Advanced Topics """



my_dict = {"Eldest Child's Age": 4,
          "Second Child's Name": "Isla",
          "Third Child's Age": float(10)/12}

print my_dict.items()
print my_dict.keys()
print my_dict.values()

# Note .items() returns touples; .keys() and .values() are also helpful. These don't preserve order

for key in my_dict:
  print key, my_dict[key]


evens_to_50 = [i for i in range(51) if i % 2 == 0]
print evens_to_50

doubles_by_3 = [x * 2 for x in range(1, 6) if (x * 2) % 3 == 0]

even_squares = [x ** 2 for x in range(1, 11) if (x ** 2) % 2 == 0]
print even_squares

cubes_by_four = [x**3 for x in range(1,11) if (x**3) % 4 == 0]
print cubes_by_four


l = [i ** 2 for i in range(1, 11)]
# Should be [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

print l[2:9:2]
# [start:end:stride]. Negative strides process the list from right to left

my_list = range(1, 11) # List of numbers 1 - 10
print my_list[::2] # prints every second element
backwards = my_list[::-1]

to_one_hundred = range(101)
backwards_by_tens = to_one_hundred[::-10]
print backwards_by_tens 


to_21 = range(1,22)
odds = to_21[0::2]
print odds
middle_third = to_21[7:14]
print middle_third


my_list = range(16)
print filter(lambda x: x % 3 == 0, my_list)
# created a list of numbers divisible by 3
# lambda is helpful if you want to make a single use function, so you don't need to actually define it as a function


languages = ["HTML", "JavaScript", "Python", "Ruby"]
print filter(lambda x: x == "Python", languages)

squares = [x**2 for x in range(1,11)]
print filter(lambda x: x in range(30,71), squares) 

threes_and_fives = [x for x in range(1,16) if ((x % 3 == 0) or (x % 5 == 0))]

garbled = "!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI"
message = garbled[::-2]
print message

garbled = "IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX"
message = filter(lambda x: x != "X", garbled)
print message



""" Introduction to Bitwise Operations """



print 5 >> 4  # Right Shift
print 5 << 1  # Left Shift
print 8 & 5   # Bitwise AND
print 9 | 4   # Bitwise OR
print 12 ^ 42 # Bitwise XOR
print ~88     # Bitwise NOT


#In Python, you can write numbers in binary format by starting the number with 0b. When doing so, the numbers can be operated on like any other number!

print 0b1,    #1
print 0b10,   #2
print 0b11,   #3
print 0b100,  #4
print 0b101,  #5
print 0b110,  #6
print 0b111   #7
print "******"
print 0b1 + 0b11
print 0b11 * 0b11


one = 0b1
two = 0b10
three = 0b11
four = 0b100
five = 0b101
six = 0b110
seven = 0b111
eight = 0b1000
nine = 0b1001
ten = 0b1010
eleven = 0b1011
twelve = 0b1100

# Base 2
print bin(2)
print bin(3)
print bin(4)
print bin(5)

# Base 8
print oct(17)

# Base 16
print hex(17)

# When given a string containing a number and the base that number is in, the int() function will return the value of that number converted to base ten

print int("1",2)
print int("10",2)
print int("111",2)
print int("0b100",2)
print int(bin(5),2)
# Print out the decimal equivalent of the binary 11001001.
print int("0b11001001",2)



shift_right = 0b1100
shift_left = 0b1

shift_right = shift_right >> 2
shift_left = shift_left << 2

print bin(shift_right)
print bin(shift_left)



# The bitwise AND (&) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if the corresponding bits of both numbers are 1

print bin(0b1110 & 0b101)

# The bitwise OR (|) operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of either number are 1.

print bin(0b1110 | 0b101)

# The XOR (^) or exclusive or operator compares two numbers on a bit level and returns a number where the bits of that number are turned on if either of the corresponding bits of the two numbers are 1, but not both

print bin(0b1110 ^ 0b101)

# The bitwise NOT operator (~) just flips all of the bits in a single number. What this actually means to the computer is actually very complicated, so we're not going to get into it. Just know that mathematically, this is equivalent to adding one to the number and then making it negative.

print ~1
print ~2
print ~3
print ~42
print ~123

# A bit mask (or bitmask) is just a variable that aids you with bitwise operations. A bit mask can help you turn specific bits on, turn others off, or just collect data from an integer about which bits are on or off.

# check whether the fourth last digit of a binary number is = 1

def check_bit4(input):
  mask = 0b1000
  if mask & input > 0:
    return "on"
  else:
    return "off"

# ensure that the third last digit of a binary number is = 0

a = 0b10111011
mask = 0b100
print bin(a | mask)

# flip digits of a binary number
a = 0b11101110
mask = 0b11111111
print bin(a^mask)

# take a binary number and flip the nth bit (counding starts from HRS at 1)
def flip_bit(number, n):
  mask = 0b1 << (n-1)
  result = number ^ mask
  return bin(result)



""" Introduction to Classes  """



class Fruit(object):
  """A class that makes various tasty fruits."""
  def __init__(self, name, color, flavor, poisonous):
    self.name = name
    self.color = color
    self.flavor = flavor
    self.poisonous = poisonous

  def description(self):
    print "I'm a %s %s and I taste %s." % (self.color, self.name, self.flavor)

  def is_edible(self):
    if not self.poisonous:
      print "Yep! I'm edible."
    else:
      print "Don't eat me! I am super poisonous."

lemon = Fruit("lemon", "yellow", "sour", False)

lemon.description()
lemon.is_edible()



""" A basic class consists only of the class keyword, the name of the class, and the class from which the new class inherits in parentheses. (We'll get to inheritance soon.) For now, our classes will inherit from the object class, like so:

class NewClass(object):
  pass # pass doesn't do aynthing, its just a placeholder

This gives them the powers and abilities of a Python object. By convention, user-defined Python class names start with a capital letter.
Need to inialise a Class with the __init__ function, the first parameter of which is used to refer to itself
"""

class Animal(object):
  def __init__(self, name):
    self.name = name

zebra = Animal("Jeffrey")
print zebra.name


class Car(object):
  def __init__(self,model,color,mpg,condition):
    self.model = model
    self.color = color
    self.mpg = mpg
    self.condition = condition

  def display_car(self):
    return "This is a " + self.color + " " + self.model + " with " + str(self.mpg) + " MPG."

  def drive_car(self):
    self.condition = "used"

my_car = Car("DeLorean","silver",88,'new')
    
print my_car.model
print my_car.color
print my_car.mpg

print my_car.display_car()

print my_car.condition
my_car.drive_car()
print my_car.condition # Car was "new" but after drive_car() is was changed to "used"


"""
One of the benefits of classes is that we can create more complicated classes that inherit variables or methods from their parent classes. This saves us time and helps us build more complicated objects, since these child classes can also include additional variables or methods.

We define a "child" class that inherits all of the variables and functions from its "parent" class like so:

class ChildClass(ParentClass):
  # new variables and functions go here

Normally we use object as the parent class because it is the most basic type of class, but by specifying a different class, we can inherit more complicated functionality.
"""

class ElectricCar(Car):
  def __init__(self, model, color, mpg, battery_type):
    self.model = model
    self.color = color
    self.mpg   = mpg
    self.battery_type = battery_type

  def drive_car(self):
    self.condition = "like new"

my_car = ElectricCar("Jazz","Black",100, "molten salt")

print my_car.condition
my_car.drive_car()
print my_car.condition


"""
Usually, classes are most useful for holding and accessing abstract collections of data.
One useful class method to override is the built-in __repr__() method, which is short for representation; by providing a return value in this method, we can tell Python how to represent an object of our class (for instance, when using a print statement).
"""

class Point3D(object):
  def __init__(self, x, y, z):
    self.x = x
    self.y = y
    self.z = z
    
  def __repr__(self):
    return "(%d, %d, %d)" % (self.x, self.y, self.z)
    
my_point = Point3D(1, 2, 3)
print my_point





""" FILE INPUT/OUTPUT """"



"""
Outputs the contents of my_list to a TXT file
Here we will tell Python to open output.txt in "w" mode ("w" stands for "write"). We stored the result of this operation in a file object, f. Doing this opens the file in write-mode and prepares Python to send data into the file. You can open files in any of the following modes:
	write-only mode ("w")
	read-only mode ("r")
	read and write mode ("r+")
	append mode ("a"), which adds any new data you write to the file to the end of the file.
"""

my_list = [i ** 2 for i in range(1, 11)]
# Generates a list of squares of the numbers 1 - 10

f = open("output.txt", "w") 
for item in my_list:
  f.write(str(item) + "\n") # + "\n" adds a new line fter each
f.close()

#You must close the file. You do this simply by calling my_file.close() (we did this for you in the last exercise). If you don't close your file, Python won't write to it properly. From here on out, you gotta close your files!

my_file = open("output.txt","r")
print my_file.read()
my_file.close()


# What if we want to read from a file line by line, rather than pulling the entire file in at once. Thankfully, Python includes a .readline() method that does exactly that. If you open a file and call .readline() on the file object, you'll get the first line of the file; subsequent calls to .readline() will return successive lines.

my_file = open("text.txt","r")

print my_file.readline()
print my_file.readline()
print my_file.readline()

my_file.close()


"""
We keep telling you that you always need to close your files after you're done writing to them. Here's why!
During the I/O process, data is buffered: this means that it is held in a temporary location before being written to the file.
Python doesn't flush the buffer—that is, write data to the file—until it's sure you're done writing. One way to do this is to close the file. If you write to a file without closing, the data won't make it to the target file.
"""

# Use a file handler to open a file for writing
write_file = open("text.txt", "w")

# Open the file for reading
read_file = open("text.txt", "r")

# Write to the file
write_file.write("Not closing files is VERY BAD.")

write_file.close()

# Try to read from the file
print read_file.read()

read_file.close()


"""
Programming is all about getting the computer to do the work. Is there a way to get Python to automatically close our files for us? Of course there is. This is Python.
You may not know this, but file objects contain a special pair of built-in methods: __enter__() and __exit__(). The details aren't important, but what is important is that when a file object's __exit__() method is invoked, it automatically closes the file. How do we invoke this method? With with and as.
The syntax looks like this:

with open("file", "mode") as variable:
  # Read or write to the file
"""

with open("text.txt", "w") as textfile:
  textfile.write("Success!")


with open("text.txt","w") as my_file:
  my_file.write("happy days")


# Python file objects have a closed attribute which is True when the file is closed and False otherwise. By checking file_object.closed, we'll know whether our file is closed and can call close() on it if it's still open.

